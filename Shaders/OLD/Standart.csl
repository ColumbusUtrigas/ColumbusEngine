#include "Data/Shaders/Common.csl"

#shader vertex

#attribute float3 aPos  0
#attribute float2 aUV   1
#attribute float3 aNorm 2
#attribute float3 aTang 3

#uniform float4x4 uModel
#uniform float4x4 uViewProjection

out float3 varPos;
out float2 varUV;
out float3 varNormal;
out float3x3 varTBN;

void main()
{
	float3 Normal = normalize(float3(float4(aNorm, 0.0) * uModel));
	float3 Tangent = normalize(float3(float4(aTang, 0.0) * uModel));
	float3 Bitangent = cross(Normal, Tangent);

	varPos = float3(float4(aPos, 1.0) * uModel);
	varUV = aUV;
	varNormal = Normal;
	varTBN = transpose(float3x3(Tangent, Bitangent, Normal));

	SV_Position = uViewProjection * float4(varPos, 1);
}

#shader pixel

#include "Data/Shaders/BRDF.csl"

in float3 varPos;
in float2 varUV;
in float3 varNormal;
in float3x3 varTBN;

#uniform Texture2D   AlbedoMap
#uniform Texture2D   NormalMap
#uniform Texture2D   RoughnessMap
#uniform Texture2D   MetallicMap
#uniform Texture2D   OcclusionMap
#uniform Texture2D   EmissionMap
#uniform Texture2D   DetailAlbedoMap
#uniform Texture2D   DetailNormalMap
#uniform TextureCube IrradianceMap
#uniform TextureCube EnvironmentMap
#uniform Texture2D   IntegrationMap

#uniform float2 Resolution
#uniform Texture2D Translucent
#uniform Texture2DShadow Shadow

#uniform bool HasAlbedoMap
#uniform bool HasNormalMap
#uniform bool HasRoughnessMap
#uniform bool HasMetallicMap
#uniform bool HasOcclusionMap
#uniform bool HasDetailAlbedoMap
#uniform bool HasDetailNormalMap

#uniform float2 Tiling
#uniform float2 DetailTiling

#uniform float3 uCameraPosition

#uniform float4  Albedo
#uniform float Roughness
#uniform float Metallic
#uniform float EmissionStrength
#uniform bool  Transparent

#define MAX_LIGHTS_COUNT 128

struct Light
{
	float3 color; float range;
	float3 pos; float innerCutoff;
	float3 dir; float outerCutoff;
	int type;
	int hasShadow;
	float4x4 lightView;
	float4 shadowRect;
};

// TODO: cbuffer abstraction, binding number
layout(std140) uniform cb_Lighting
{
	Light lights[MAX_LIGHTS_COUNT];
	int count;
} u_Lights;

float2 _TiledUV;
float2 _TiledDetailUV;

float4 _Albedo;
float3 _Normal;
float _Roughness;
float _Metallic;

void Init(void);
void Final(void);

void main(void)
{
	Init();
	Final();
}

void Init(void)
{
	_TiledUV = varUV * Tiling;
	_TiledDetailUV = varUV * DetailTiling;

	if (HasAlbedoMap)
	{
		float4 AlbedoSample = Sample2D(AlbedoMap, _TiledUV);

		if (HasDetailAlbedoMap)
			_Albedo = float4(AlbedoSample.rgb * Sample2D(DetailAlbedoMap, _TiledDetailUV).rgb * 1.8f, AlbedoSample.a);
		else
			_Albedo = AlbedoSample;
	}
	else
		if (HasDetailAlbedoMap)
			_Albedo = Sample2D(DetailAlbedoMap, _TiledDetailUV);
		else
			_Albedo = float4(1);

	if (HasNormalMap)
		if (HasDetailNormalMap)
			_Normal = NormalBlend(Sample2D(NormalMap, _TiledUV), Sample2D(DetailNormalMap, _TiledDetailUV)) * varTBN;
		else
			_Normal = normalize(Sample2D(NormalMap, _TiledUV).rgb * 2.0 - 1.0) * varTBN;
	else
		if (HasDetailNormalMap)
			_Normal = normalize(Sample2D(DetailNormalMap, _TiledDetailUV).rgb * 2.0 - 1.0) * varTBN;
		else
			_Normal = varNormal;

	if (HasRoughnessMap)
		_Roughness = Sample2D(RoughnessMap, _TiledUV).r;
	else
		_Roughness = Roughness;

	if (HasMetallicMap)
		_Metallic = Sample2D(MetallicMap, _TiledUV).r;
	else
		_Metallic = Metallic;
}

float3 LightCalc(int id, float3 F, float3 N, float3 V, float NdotV)
{
	float3 LightPos = u_Lights.lights[id].pos;
	float3 LightDir = u_Lights.lights[id].dir;
	int LightType = u_Lights.lights[id].type;
	float LightRange = u_Lights.lights[id].range;
	float LightInnerCutoff = u_Lights.lights[id].innerCutoff;
	float LightOuterCutoff = u_Lights.lights[id].outerCutoff;

	float AO = HasOcclusionMap ? Sample2D(OcclusionMap, _TiledUV).r : 1.0;
	float Distance = length(LightPos - varPos);
	float Attenuation = 1.0; if (LightType != 0) Attenuation = clamp(1.0 - Distance * Distance / (LightRange * LightRange), 0.0, 1.0); Attenuation *= Attenuation;

	float3 L = normalize(LightPos - varPos); if (LightType == 0) L = normalize(-LightDir);
	float3 H = normalize(V + L);

	float NdotL = max(0, dot(N, L));

	if (LightType == 2) // spotlight
	{
		float angle;
		angle = dot(LightDir, -L);
		angle = max(angle, 0);
		angle = acos(angle);

		if (angle < LightInnerCutoff)
			Attenuation *= 1.0;
		else if (angle < LightOuterCutoff)
			Attenuation *= (1.0 - smoothstep(LightInnerCutoff, LightOuterCutoff, angle));
		else
			Attenuation = 0.0;
	}

	float3 DiffuseBRDF = LambertDiffuseBRDF(Albedo.rgb) * AO;
	float3 SpecularBRDF = CookTorranceSpecularBRDF(N, L, H, F, NdotV, _Roughness);

	float Factor = 1.0 - _Metallic;
	float shadow = CalculateShadow(NdotL, u_Lights.lights[id].hasShadow, u_Lights.lights[id].lightView, varPos, u_Lights.lights[id].shadowRect, Shadow);

	return (Factor * DiffuseBRDF + SpecularBRDF) * NdotL * u_Lights.lights[id].color * Attenuation * shadow;
}

float3 Lights(void)
{
	float3 N = normalize(_Normal);
	float3 V = normalize(uCameraPosition - varPos);
	float3 R = reflect(-V, _Normal);
	float NdotV = max(0.0, dot(N, V));

	float3 F0 = float3(0.04); 
	F0 = mix(F0, float3(1), _Metallic);

	float3 BRDF = float3(0.0);
	float3 F = FresnelRoughness(NdotV, F0, _Roughness);

	for (int i = 0; i < u_Lights.count; ++i)
	{
		BRDF += LightCalc(i, F, N, V, NdotV);
	}

	const float MAX_REFLECTION_LOD = 7.0; // TODO
	float3 prefilteredColor = SampleCubeLod(EnvironmentMap, R,  _Roughness * MAX_REFLECTION_LOD).rgb;
	float2 envBRDF  = Sample2D(IntegrationMap, float2(max(dot(_Normal, V), 0.0), _Roughness)).rg;
	float3 Specular = prefilteredColor * (F * envBRDF.x + envBRDF.y);
	float3 Ambient = SampleCube(IrradianceMap, _Normal).rgb;
	float AO = HasOcclusionMap ? Sample2D(OcclusionMap, _TiledUV).r : 1.0;

	BRDF += (1.0 - _Metallic) * Ambient * AO;
	BRDF += Specular * AO;

	return BRDF * Albedo.rgb;
}

void Final(void)
{
	float4 Color = float4(Lights(), Albedo.a) * _Albedo;

	Color.rgb += Sample2D(EmissionMap, _TiledUV).rgb * EmissionStrength;

	RT0 = Color;
	RT1 = float4(_Normal, 1);

	if (Transparent && Color.a == 1.0) discard;
	if (Transparent)
	{
		RT0.rgb = mix(BicubicSample2DLod(Translucent, SV_Position.xy / Resolution, _Roughness * 5).rgb, Color.rgb, Color.a);
		RT0.a = 1;
	}

	if (!Transparent && Color.a < 1.0) discard;
}


