#define PI 3.141592653
#define COLOR_EXP  0.454545 //1.0 / 2.2

float3 NormalBlend(float4 n1, float4 n2)
{
	//UDN
	float3 c = float3(2, 1, 0);
	float3 r;
	r = n2.xyz * c.yyz + n1.xyz;
	r = r * c.xxx - c.xxy;
	return normalize(r);
}

float2 ExtractSubUV(int FrameNumber, float2 Texcoords, float2 Frame)
{
	int FrameHorizontal = FrameNumber % int(Frame.x);
	int FrameVertical = FrameNumber / int(Frame.x) - 1;
	float2 Begin = 1.0 / Frame;

	return float2(Texcoords.x * Begin.x + Begin.x * FrameHorizontal,
	              Texcoords.y * Begin.y + Begin.y * FrameVertical);
}

float2 EncodeNormal(in float3 n)
{
	return float2(n.xy / sqrt(8.0 * n.z + 8.0) + 0.5);
}

float4 cubic(float v)
{
    float4 n = float4(1.0, 2.0, 3.0, 4.0) - v;
    float4 s = n * n * n;
    float x = s.x;
    float y = s.y - 4.0 * s.x;
    float z = s.z - 4.0 * s.y + 6.0 * s.x;
    float w = 6.0 - x - y - z;
    return float4(x, y, z, w);
}

float4 BicubicSample2DLod(Texture2D sampler, float2 texCoords, float lod)
{

   float2 texSize = textureSize(sampler, int(lod));
   float2 invTexSize = 1.0 / texSize;

   texCoords = texCoords * texSize - 0.5;


    float2 fxy = fract(texCoords);
    texCoords -= fxy;

    float4 xcubic = cubic(fxy.x);
    float4 ycubic = cubic(fxy.y);

    float4 c = texCoords.xxyy + float2 (-0.5, +1.5).xyxy;

    float4 s = float4(xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw);
    float4 offset = c + float4 (xcubic.yw, ycubic.yw) / s;

    offset *= invTexSize.xxyy;

    float4 sample0 = textureLod(sampler, offset.xz, lod);
    float4 sample1 = textureLod(sampler, offset.yz, lod);
    float4 sample2 = textureLod(sampler, offset.xw, lod);
    float4 sample3 = textureLod(sampler, offset.yw, lod);

    float sx = s.x / (s.x + s.y);
    float sy = s.z / (s.z + s.w);

    return mix(mix(sample3, sample2, sx), mix(sample1, sample0, sx), sy);
}
