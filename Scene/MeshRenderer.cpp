/************************************************
*                MeshRenderer.cpp               *
*************************************************
*          This file is a part of:              *
*               COLUMBUS ENGINE                 *
*************************************************
*                Nika(Columbus) Red             *
*                   12.11.2017                  *
*************************************************/
#include <Scene/MeshRenderer.h>

namespace Columbus
{

	//////////////////////////////////////////////////////////////////////////////
	MeshRenderer::MeshRenderer(Mesh* aMesh) :
		mMesh(aMesh)
	{
		
	}
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	bool MeshRenderer::onCreate()
	{
		return false;
	}
	//////////////////////////////////////////////////////////////////////////////
	bool MeshRenderer::onUpdate()
	{
		return false;
	}
	//////////////////////////////////////////////////////////////////////////////
	void MeshRenderer::update(const float aTimeTick)
	{
		if (mMesh != nullptr)
			mMesh->setCamera(mCamera);
	}
	//////////////////////////////////////////////////////////////////////////////
	void MeshRenderer::render(Transform& aTransform)
	{
		if (mMesh != nullptr)
			mMesh->render(aTransform);
	}
	//////////////////////////////////////////////////////////////////////////////
	std::string MeshRenderer::getType()
	{
		return "MeshRenderer";
	}
	//////////////////////////////////////////////////////////////////////////////
	void MeshRenderer::setLights(std::vector<Light*> aLights)
	{
		mMesh->setLights(aLights);
	}
	//////////////////////////////////////////////////////////////////////////////
	void MeshRenderer::setCamera(const Camera aCamera)
	{
		mCamera = static_cast<Camera>(aCamera);
	}
	//////////////////////////////////////////////////////////////////////////////
	Shader* MeshRenderer::getShader() const
	{
		if (mMesh == nullptr) return nullptr;
		return mMesh->mMat.getShader();
	}
	//////////////////////////////////////////////////////////////////////////////
	void MeshRenderer::setShader(Shader* aShader)
	{
		if (mMesh == nullptr) return;
		mMesh->mMat.setShader(aShader);
	}
	//////////////////////////////////////////////////////////////////////////////
	void MeshRenderer::setReflection(const Cubemap* aCubemap)
	{
		if (mMesh == nullptr) return;
		mMesh->mMat.setReflection(aCubemap);
	}
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	MeshRenderer::~MeshRenderer()
	{

	}

}


