/************************************************
*                  Transform.cpp                *
*************************************************
*          This file is a part of:              *
*               COLUMBUS ENGINE                 *
*************************************************
*                Nika(Columbus) Red             *
*                   12.11.2017                  *
*************************************************/

#include <Scene/Transform.h>

namespace Columbus
{

	//////////////////////////////////////////////////////////////////////////////
	C_Transform::C_Transform() :
		mMatrix(1.0)
	{
		
	}
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	void C_Transform::setPos(C_Vector3 aPos)
	{
		mPos = aPos;
	}
	//////////////////////////////////////////////////////////////////////////////
	void C_Transform::addPos(C_Vector3 aPos)
	{
		mPos += aPos;
	}
	//////////////////////////////////////////////////////////////////////////////
	C_Vector3 C_Transform::getPos() const
	{
		return mPos;
	}
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	void C_Transform::setRot(C_Vector3 aRot)
	{
		mRot = aRot;
	}
	//////////////////////////////////////////////////////////////////////////////
	void C_Transform::addRot(C_Vector3 aRot)
	{
		mRot += aRot;
	}
	//////////////////////////////////////////////////////////////////////////////
	C_Vector3 C_Transform::getRot() const
	{
		return mRot;
	}
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	void C_Transform::setScale(C_Vector3 aScale)
	{
		mScale = aScale;
	}
	//////////////////////////////////////////////////////////////////////////////
	void C_Transform::addScale(C_Vector3 aScale)
	{
		mScale += aScale;
	}
	//////////////////////////////////////////////////////////////////////////////
	C_Vector3 C_Transform::getScale() const
	{
		return mScale;
	}
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	void C_Transform::update()
	{
		mMatrix.identity();

		mMatrix.scale(mScale);
		mMatrix.rotate(C_Vector3(0, 0, 1), mRot.z);
		mMatrix.rotate(C_Vector3(1, 0, 0), mRot.x);
		mMatrix.rotate(C_Vector3(0, 1, 0), mRot.y);
		mMatrix.translate(mPos);

		mNormalMatrix = mMatrix;
		mNormalMatrix.transpose();
		mNormalMatrix.invert();
	}
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	void C_Transform::setMatrix(C_Matrix4 aMatrix)
	{
		mMatrix = aMatrix;
	}
	//////////////////////////////////////////////////////////////////////////////
	C_Matrix4 C_Transform::getMatrix() const
	{
		return mMatrix;
	}
	//////////////////////////////////////////////////////////////////////////////
	C_Matrix4 C_Transform::getNormalMatrix() const
	{
		return mNormalMatrix;
	}
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	C_Transform::~C_Transform()
	{

	}

}


