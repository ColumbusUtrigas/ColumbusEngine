#include <Graphics/OpenGL/DeviceOpenGL.h>
#include <Graphics/OpenGL/ShaderOpenGL.h>
#include <Graphics/OpenGL/CubemapOpenGL.h>
#include <Graphics/OpenGL/TextureOpenGL.h>
#include <Graphics/OpenGL/MeshOpenGL.h>

namespace Columbus
{

	//////////////////////////////////////////////////////////////////////////////
	C_DeviceOpenGL::C_DeviceOpenGL()
	{

	}
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	C_Shader* C_DeviceOpenGL::createShader() const
	{
		return new C_ShaderOpenGL();
	}
	//////////////////////////////////////////////////////////////////////////////
	C_Shader* C_DeviceOpenGL::createShader(std::string aVert, std::string aFrag) const
	{
		return new C_ShaderOpenGL(aVert, aFrag);
	}
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	C_Cubemap* C_DeviceOpenGL::createCubemap() const
	{
		return new C_CubemapOpenGL();
	}
	//////////////////////////////////////////////////////////////////////////////
	C_Cubemap* C_DeviceOpenGL::createCubemap(std::string aPath) const
	{
		return new C_CubemapOpenGL(aPath);
	}
	//////////////////////////////////////////////////////////////////////////////
	C_Cubemap* C_DeviceOpenGL::createCubemap(std::array<std::string, 6> aPath) const
	{
		return new C_CubemapOpenGL(aPath);
	}
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	C_Texture* C_DeviceOpenGL::createTexture() const
	{
		return new C_TextureOpenGL();
	}
	//////////////////////////////////////////////////////////////////////////////
	C_Texture* C_DeviceOpenGL::createTexture(std::string aPath, bool aSmooth) const
	{
		return new C_TextureOpenGL(aPath, aSmooth);
	}
	//////////////////////////////////////////////////////////////////////////////
	C_Texture* C_DeviceOpenGL::createTexture(const char* aData, const int aW, const int aH, bool aSmooth) const
	{
		return new C_TextureOpenGL(aData, aW, aH, aSmooth);
	}
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	C_Mesh* C_DeviceOpenGL::createMesh() const
	{
		return new C_MeshOpenGL();
	}
	//////////////////////////////////////////////////////////////////////////////
	C_Mesh* C_DeviceOpenGL::createMesh(std::vector<C_Vertex> aVert) const
	{
		return new C_MeshOpenGL(aVert);
	}
	//////////////////////////////////////////////////////////////////////////////
	C_Mesh* C_DeviceOpenGL::createMesh(std::vector<C_Vertex> aVert, C_Material aMat) const
	{
		return new C_MeshOpenGL(aVert, aMat);
	}
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	C_DeviceOpenGL::~C_DeviceOpenGL()
	{

	}

}








