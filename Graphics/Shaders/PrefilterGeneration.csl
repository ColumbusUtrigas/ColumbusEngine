R"(
#shader vertex
#attribute float3 a_Pos 0
#uniform float4x4 Projection
#uniform float4x4 View

out float3 var_Pos;

void main()
{
	SV_Position = Projection * View * float4(a_Pos, 1);
	var_Pos = a_Pos;
}

#shader pixel
#uniform float Roughness
#uniform TextureCube EnvironmentMap

in float3 var_Pos;

const float PI = 3.14159265359;

float RadicalInverse(uint n, uint base)
{
	float InvBase = 1.0 / float(base);
	float Denom   = 1.0;
	float Result  = 0.0;

	for(uint i = 0u; i < 32u; ++i)
	{
		if(n > 0u)
		{
			Denom   = mod(float(n), 2.0);
			Result += Denom * InvBase;
			InvBase = InvBase / 2.0;
			n       = uint(float(n) / 2.0);
		}
	}

	return Result;
}

float2 Hammersley(uint i, uint N)
{
	return float2(float(i) / float(N), RadicalInverse(i, 2u));
}

float3 ImportanceSampleGGX(float2 Xi, float3 N, float roughness)
{
	float a = roughness * roughness;

	float Phi = 2.0 * PI * Xi.x;
	float CosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
	float SinTheta = sqrt(1.0 - CosTheta * CosTheta);

	float3 H;
	H.x = cos(Phi) * SinTheta;
	H.y = sin(Phi) * SinTheta;
	H.z = CosTheta;

	float3 Up        = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
	float3 Tangent   = normalize(cross(Up, N));
	float3 Bitangent = cross(N, Tangent);

	return normalize(Tangent * H.x + Bitangent * H.y + N * H.z);
}

void main()
{		
	float3 N = normalize(var_Pos);
	float3 R = N;
	float3 V = R;

	const uint SAMPLE_COUNT = 1024u;
	float TotalWeight = 0.0;   
	float3 PrefilteredColor = float3(0.0);

	for(uint i = 0u; i < SAMPLE_COUNT; ++i)
	{
		float2 Xi = Hammersley(i, SAMPLE_COUNT);
		float3 H  = ImportanceSampleGGX(Xi, N, Roughness);
		float3 L  = normalize(2.0 * dot(V, H) * H - V);

		float NdotL = max(dot(N, L), 0.0);

		if(NdotL > 0.0)
		{
			PrefilteredColor += Sample2D(EnvironmentMap, L).rgb * NdotL;
			TotalWeight      += NdotL;
		}
	}

	RT0 = float4(PrefilteredColor / TotalWeight, 1.0);
}
)"
