R"(
#shader vertex = screen_space
#shader pixel
in float2 var_UV;

const float PI = 3.14159265359;

float GeometrySchlickGGX(float NdotV, float roughness)
{
	float a = roughness;
	float k = (a * a) / 2.0;

	float Nom   = NdotV;
	float Denom = NdotV * (1.0 - k) + k;

	return Nom / Denom;
}

float GeometrySmith(float3 N, float3 V, float3 L, float roughness)
{
	float NdotV = max(dot(N, V), 0.0);
	float NdotL = max(dot(N, L), 0.0);
	float ggx2 = GeometrySchlickGGX(NdotV, roughness);
	float ggx1 = GeometrySchlickGGX(NdotL, roughness);

	return ggx1 * ggx2;
}

float3 ImportanceSampleGGX(float2 Xi, float3 N, float roughness)
{
	float a = roughness * roughness;

	float Phi = 2.0 * PI * Xi.x;
	float CosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
	float SinTheta = sqrt(1.0 - CosTheta * CosTheta);

	float3 H;
	H.x = cos(Phi) * SinTheta;
	H.y = sin(Phi) * SinTheta;
	H.z = CosTheta;

	float3 Up        = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
	float3 Tangent   = normalize(cross(Up, N));
	float3 Bitangent = cross(N, Tangent);

	return normalize(Tangent * H.x + Bitangent * H.y + N * H.z);
}

float RadicalInverse(uint n, uint base)
{
	float InvBase = 1.0 / float(base);
	float Denom   = 1.0;
	float Result  = 0.0;

	for(uint i = 0u; i < 32u; ++i)
	{
		if(n > 0u)
		{
			Denom   = mod(float(n), 2.0);
			Result += Denom * InvBase;
			InvBase = InvBase / 2.0;
			n       = uint(float(n) / 2.0);
		}
	}

	return Result;
}

float2 Hammersley(uint i, uint N)
{
	return float2(float(i) / float(N), RadicalInverse(i, 2u));
}

float2 IntegrateBRDF(float NdotV, float roughness)
{
	float3 V;
	V.x = sqrt(1.0 - NdotV * NdotV);
	V.y = 0.0;
	V.z = NdotV;

	float A = 0.0;
	float B = 0.0;

	float3 N = float3(0.0, 0.0, 1.0);

	const uint SAMPLE_COUNT = 1024u;

	for(uint i = 0u; i < SAMPLE_COUNT; ++i)
	{
		float2 Xi = Hammersley(i, SAMPLE_COUNT);
		float3 H  = ImportanceSampleGGX(Xi, N, roughness);
		float3 L  = normalize(2.0 * dot(V, H) * H - V);

		float NdotL = max(L.z, 0.0);
		float NdotH = max(H.z, 0.0);
		float VdotH = max(dot(V, H), 0.0);

		if(NdotL > 0.0)
		{
			float G = GeometrySmith(N, V, L, roughness);
			float G_Vis = (G * VdotH) / (NdotH * NdotV);
			float Fc = pow(1.0 - VdotH, 5.0);

			A += (1.0 - Fc) * G_Vis;
			B += Fc * G_Vis;
		}
	}

	return float2(A, B) / float(SAMPLE_COUNT);
}

void main() 
{
	float2 IntegratedBRDF = IntegrateBRDF(var_UV.x, var_UV.y);
	RT0 = float4(IntegratedBRDF, 1, 1);
}
)"
