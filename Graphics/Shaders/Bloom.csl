R"(
#shader vertex = screen_space
#shader pixel
#uniform Texture2D BaseTexture
#uniform Texture2D Blur
#uniform float Intensity
#uniform float Radius

in float2 var_UV;

float4 cubic(float v)
{
    float4 n = float4(1.0, 2.0, 3.0, 4.0) - v;
    float4 s = n * n * n;
    float x = s.x;
    float y = s.y - 4.0 * s.x;
    float z = s.z - 4.0 * s.y + 6.0 * s.x;
    float w = 6.0 - x - y - z;
    return float4(x, y, z, w);
}

float4 BicubicSample2DLod(Texture2D sampler, float2 texCoords, float lod)
{

   float2 texSize = textureSize(sampler, int(lod));
   float2 invTexSize = 1.0 / texSize;

   texCoords = texCoords * texSize - 0.5;


    float2 fxy = fract(texCoords);
    texCoords -= fxy;

    float4 xcubic = cubic(fxy.x);
    float4 ycubic = cubic(fxy.y);

    float4 c = texCoords.xxyy + float2 (-0.5, +1.5).xyxy;

    float4 s = float4(xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw);
    float4 offset = c + float4 (xcubic.yw, ycubic.yw) / s;

    offset *= invTexSize.xxyy;

    float4 sample0 = textureLod(sampler, offset.xz, lod);
    float4 sample1 = textureLod(sampler, offset.yz, lod);
    float4 sample2 = textureLod(sampler, offset.xw, lod);
    float4 sample3 = textureLod(sampler, offset.yw, lod);

    float sx = s.x / (s.x + s.y);
    float sy = s.z / (s.z + s.w);

    return mix(mix(sample3, sample2, sx), mix(sample1, sample0, sx), sy);
}

void main()
{
	float3 hdrColor = Sample2D(BaseTexture, var_UV).rgb;
	float3 bloomColor = BicubicSample2DLod(Blur, var_UV, Radius).rgb * Intensity;
	hdrColor += bloomColor;
	RT0 = float4(hdrColor, 1.0);
}
)"
