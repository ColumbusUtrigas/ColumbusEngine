R"(
#shader vertex
#attribute vec3 a_Pos 0
#uniform mat4 Projection
#uniform mat4 View

out vec3 var_Pos;

void main(void)
{
	SV_Position = Projection * View * vec4(a_Pos, 1);
	var_Pos = a_Pos;
}

#shader fragment
#uniform TextureCube EnvironmentMap

in vec3 var_Pos;

const float PI = 3.14159265359;

void main(void)
{
	vec3 Normal = normalize(var_Pos);
	vec3 Irradiance = vec3(0.0);

	vec3 Up    = vec3(0.0, 1.0, 0.0);
	vec3 Right = cross(Up, Normal);
	Up         = cross(Normal, Right);

	float SampleDelta = 0.025;
	float NumSamples = 0.0;

	for(float Phi = 0.0; Phi < 2.0 * PI; Phi += SampleDelta)
	{
		for(float Theta = 0.0; Theta < 0.5 * PI; Theta += SampleDelta)
		{
			vec3 TangentSample = vec3(sin(Theta) * cos(Phi), sin(Theta) * sin(Phi), cos(Theta));
			vec3 SampleVec = TangentSample.x * Right + TangentSample.y * Up + TangentSample.z * Normal; 

			Irradiance += SampleCube(EnvironmentMap, SampleVec).rgb * cos(Theta) * sin(Theta);
			NumSamples += 1.0;
		}
	}

	RT0 = vec4(PI * Irradiance * (1.0 / NumSamples), 1.0);
}
)"
