R"(
#shader vertex = screen_space
#shader pixel
#uniform Texture2D u_BaseTexture
#uniform Texture2D u_AETexture

#uniform float u_Saturation
#uniform float u_Hue
#uniform float u_Temperature

#uniform float3 u_Lift
#uniform float3 u_Gain
#uniform float3 u_Offset

layout(std140) uniform _Data
{
	float u_Exposure;
	float u_Gamma;
	int u_Type;
	int u_AEEnable;
};

in float2 var_UV;

float Luma(float3 color) { return dot(color, float3(0.2126, 0.7152, 0.0722)); }
vec3 rgb2hsv(vec3 c)
{
    vec4 K=vec4(0,-1/3.,2/3.,-1),
    p=mix(vec4(c.bg,K.wz),vec4(c.gb,K.xy),step(c.b,c.g)),
    q=mix(vec4(p.xyw,c.r),vec4(c.r,p.yzx),step(p.x,c.r));
    float d=q.x-min(q.w,q.y),e=1.0e-10;
    return vec3(abs(q.z+(q.w-q.y)/(6*d+e)),d/(q.x+e),q.x);
}
vec3 hsv2rgb(vec3 c){return c.z*mix(vec3(1),saturate(abs(fract(vec3(1,2/3.,1/3.)+c.x)*6-3)-1),c.y);}
vec3 rgb2hsv(float r,float g,float b){return rgb2hsv(vec3(r,g,b));}
vec3 hsv2rgb(float h,float s,float v){return hsv2rgb(vec3(h,s,v));}

vec3 colorFromKelvin(float temperature) // photographic temperature values are between 15 to 150
{
    float r, g, b;
    if(temperature <= 66.0)
    {
        r = 1.0;
        g = saturate((99.4708025861 * log(temperature) - 161.1195681661) / 255.0);
        if(temperature < 19.0)
            b = 0.0;
        else
            b = saturate((138.5177312231 * log(temperature - 10.0) - 305.0447927307) / 255.0);
    }
    else
    {
        r = saturate((329.698727446 / 255.0) * pow(temperature - 60.0, -0.1332047592));
        g = saturate((288.1221695283  / 255.0) * pow(temperature - 60.0, -0.0755148492));
        b = 1.0;
    }
    return vec3(r, g, b);
}

float3 TonemapSimple(float3 HDR)
{
	HDR = HDR / (1.0 + HDR);
	return pow(HDR, float3(1.0 / u_Gamma));
}

float3 TonemapFilmic(float3 HDR)
{
	HDR = max(float3(0.0), HDR - 0.004);
	return (HDR * (6.2 * HDR + 0.5)) / (HDR * (6.2 * HDR + 1.7) + 0.06);
}

float3 TonemapACES(float3 HDR)
{
	const float a = 2.51f;
	const float b = 0.03f;
	const float c = 2.43f;
	const float d = 0.59f;
	const float e = 0.14f;

	HDR = (HDR * (a * HDR + b))  /
	      (HDR * (c * HDR + d) + e);
	HDR = pow(HDR, 1.0 / float3(u_Gamma));
	return HDR;
}

float3 TonemapRomBinDaHouse(float3 HDR)
{
	HDR = exp(-1.0 / (2.72 * HDR + 0.15));
	return pow(HDR, float3(1.0 / u_Gamma));
}

float3 TonemapUncharted(float3 HDR)
{
	float A = 0.15;
	float B = 0.50;
	float C = 0.10;
	float D = 0.20;
	float E = 0.02;
	float F = 0.30;
	float W = 11.2;

	HDR = ((HDR * (A * HDR + C * B) + D * E) / (HDR * (A * HDR + B) + D * F)) - E / F;
	float white = ((W * (A * W + C * B) + D * E) / (W * (A * W + B) + D * F)) - E / F;
	HDR /= white;
	HDR = pow(HDR, float3(1.0 / u_Gamma));
	return HDR;
}

void main(void)
{
	float E = u_Exposure;

	if (u_AEEnable == 1)
	{
		E = Sample2D(u_AETexture, float2(0.5)).r;
	}

	float3 HDR = clamp(Sample2D(u_BaseTexture, var_UV).rgb * E, 0, 50000);

	// saturation
	float luma = Luma(HDR);
	HDR = mix(float3(luma), HDR, u_Saturation);

	// hue shift
	HDR = hsv2rgb(rgb2hsv(HDR) + float3(fract(u_Hue / 6.0), 0.0, 0.0));

	// temperature
	HDR *= float3(1.0) / colorFromKelvin(u_Temperature);

	// color corrector
	HDR = max(float3(0.0), HDR * (1.0 + u_Gain - u_Lift) + u_Lift + u_Offset);

	float3 Mapped = float3(0.0);

	switch (u_Type)
	{
	case 0: Mapped = TonemapSimple(HDR); break;
	case 1: Mapped = TonemapFilmic(HDR); break;
	case 2: Mapped = TonemapACES(HDR); break;
	case 3: Mapped = TonemapRomBinDaHouse(HDR); break;
	case 4: Mapped = TonemapUncharted(HDR); break;
	}

	RT0 = float4(Mapped, 1.0);
}
)"
