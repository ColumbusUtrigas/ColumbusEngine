/************************************************
*                    Window.cpp                 *
*************************************************
*          This file is a part of:              *
*               COLUMBUS ENGINE                 *
*************************************************
*                Nika(Columbus) Red             *
*                   16.01.2018                  *
*************************************************/
#include <Graphics/Window.h>

namespace Columbus
{

	C_Window::C_Window(const C_Vector2 aSize, const std::string aTitle, const int aFlags) :
		mVSync(true),
		mOpen(true),
		mKeyFocus(true),
		mMouseFocus(true),
		mShown(false),
		mMinimised(false),
		mRedrawTime(0.0),
		mFPS(0),
		mTitle(aTitle),
		mSize(aSize)
	{

	}
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	void C_Window::update()
	{

	}
	//////////////////////////////////////////////////////////////////////////////
	void C_Window::clear(const C_Vector4 aColor)
	{

	}
	//////////////////////////////////////////////////////////////////////////////
	void C_Window::display()
	{

	}
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	void C_Window::setVSync(const bool aVSync)
	{
		mVSync = static_cast<bool>(aVSync);
	}
	//////////////////////////////////////////////////////////////////////////////
	bool C_Window::getVSync() const
	{
		return mVSync;
	}
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	void C_Window::setSize(const C_Vector2 aSize)
	{
		mSize = static_cast<C_Vector2>(aSize);
	}
	//////////////////////////////////////////////////////////////////////////////
	C_Vector2 C_Window::getSize() const
	{
		return mSize;
	}
	//////////////////////////////////////////////////////////////////////////////
	float C_Window::getAspect() const
	{
		return mSize.x / mSize.y;
	}
	//////////////////////////////////////////////////////////////////////////////
	float C_Window::getRedrawTime() const
	{
		return mRedrawTime;
	}
	//////////////////////////////////////////////////////////////////////////////
	unsigned int C_Window::getFPS() const
	{
		return mFPS;
	}
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	bool C_Window::isOpen() const
	{
		return mOpen;
	}
	//////////////////////////////////////////////////////////////////////////////
	bool C_Window::isKeyFocus() const
	{
		return mKeyFocus;
	}
	//////////////////////////////////////////////////////////////////////////////
	bool C_Window::isMouseFocus() const
	{
		return mMouseFocus;
	}
	//////////////////////////////////////////////////////////////////////////////
	bool C_Window::isShown() const
	{
		return mShown;
	}
	//////////////////////////////////////////////////////////////////////////////
	bool C_Window::isMinimised() const
	{
		return mMinimised;
	}
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	C_Window::~C_Window()
	{

	}

}









