/************************************************
*              	   Model.cpp                    *
*************************************************
*          This file is a part of:              *
*               COLUMBUS ENGINE                 *
*************************************************
*                Nika(Columbus) Red             *
*                   10.01.2018                  *
*************************************************/

#include <Graphics/Mesh.h>

namespace Columbus
{

	//////////////////////////////////////////////////////////////////////////////
	Mesh::Mesh(std::vector<Vertex> aVert) :
		mPos(Vector3(0, 0, 0))
	{
		setVertices(aVert);
	}	//////////////////////////////////////////////////////////////////////////////
	Mesh::Mesh()
	{

	}
	//////////////////////////////////////////////////////////////////////////////
	Mesh::Mesh(std::vector<Vertex> aVert, C_Material aMat)
	{
		mMat = aMat;
		setVertices(aVert);
	}
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	void Mesh::setVertices(std::vector<Vertex> aVert)
	{

	}
	//////////////////////////////////////////////////////////////////////////////
	//Render mesh
	void Mesh::render(Transform aTransform)
	{

	}
	//////////////////////////////////////////////////////////////////////////////
	void Mesh::setCamera(C_Camera aCamera)
	{
		mCamera = aCamera;
	}
	//////////////////////////////////////////////////////////////////////////////
	void Mesh::setParent(Mesh* aParent)
	{
		mParent = aParent;
	}
	//////////////////////////////////////////////////////////////////////////////
	void Mesh::addChild(Mesh* aChild)
	{
		if (aChild == nullptr) return;

		mChilds.push_back(aChild);
		aChild->setParent(this);
	}
	//////////////////////////////////////////////////////////////////////////////
	//Set light casters, which will calculate to using in shaders
	void Mesh::setLights(std::vector<C_Light*> aLights)
	{
		mLights = aLights;
	}
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	Mesh::~Mesh()
	{

	}

}
